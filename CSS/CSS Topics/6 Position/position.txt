The `position` property in CSS specifies the positioning method for an element in a document. 
It defines how an element is positioned in the document flow and how its offset properties (`top`, `right`, `bottom`, `left`) will affect it.

# Types of Positioning:
          1. `static` (Default)
          2. `relative`
          3. `absolute`
          4. `fixed`
          5. `sticky`
--------------------------------
1. `position: static;`
      - Default positioning for all elements.
      - Elements are positioned according to the normal document flow.
      - Offset properties (`top`, `right`, `bottom`, `left`) have no effect.

      Example:      
          <style>
            .static-box {
              width: 100px;
              height: 100px;
              background-color: lightblue;
            }
          </style>

          <div class="static-box">Static</div>    
      - The `.static-box` element will be positioned according to the normal flow of the document.

-------------------------------------
 2. `position: relative;`

- The element is positioned relative to its normal position.
- Offset properties (`top`, `right`, `bottom`, `left`) move the element from its normal position.

Example:

<style>
  .relative-box {
    position: relative;
    top: 20px;
    left: 30px;
    width: 100px;
    height: 100px;
    background-color: lightgreen;
  }
</style>

<div class="relative-box">Relative</div>

- The `.relative-box` will move 20px down and 30px to the right from its original position.

--------------------------------------------------------------------------------
 3. `position: absolute;`
- The element is positioned relative to its nearest positioned ancestor (an ancestor with `position` other than `static`).
- If there is no positioned ancestor, it is positioned relative to the initial containing block (usually the `<html>` element).

Example:
<style>
  .relative-parent {
    position: relative;
    width: 200px;
    height: 200px;
    background-color: lightcoral;
  }
  .absolute-box {
    position: absolute;
    top: 20px;
    left: 20px;
    width: 100px;
    height: 100px;
    background-color: lightyellow;
  }
</style>

<div class="relative-parent">
  <div class="absolute-box">Absolute</div>
</div>

- The `.absolute-box` is positioned 20px from the top and left of the `.relative-parent`.

--------------------------------------------------------
 4. `position: fixed;`
- The element is positioned relative to the viewport, which means it stays in the same position even when the page is scrolled.
- Offset properties (`top`, `right`, `bottom`, `left`) move the element relative to the viewport.

Example:
<style>
  .fixed-box {
    position: fixed;
    top: 10px;
    left: 10px;
    width: 100px;
    height: 100px;
    background-color: lightpink;
  }
</style>

<div class="fixed-box">Fixed</div>
<p style="height: 1000px;">Scroll down the page</p>

- The `.fixed-box` stays in the top-left corner of the viewport, even when you scroll the page.

-------------------------------------------
 5. `position: sticky;`

    - The element is treated as `relative` until it crosses a specified offset, then it becomes `fixed` at that offset.
    - Requires a threshold value (using `top`, `right`, `bottom`, `left`) for the stickiness to activate.

            Example:

            <style>
              .sticky-box {
                position: sticky;
                top: 0;
                width: 100%;
                height: 50px;
                background-color: lightcyan;
              }
              .content {
                height: 1500px;
                background-color: lightgrey;
              }
            </style>

            <div class="sticky-box">Sticky</div>
            <div class="content">Scroll down to see the sticky effect</div>

    - The `.sticky-box` sticks to the top of the viewport when you scroll past it.

--------------------------------
 Summary Table:

| Position Type| Relative to | Offset Properties | Scrolling Behavior |
|--------------|-------------|-------------------|--------------------|
| `static`     | Normal document flow | No effect| Moves with scroll  |
| `relative`   | Its normal position | Moves the element | Moves with scroll |
| `absolute`   | Nearest positioned ancestor | Moves the element | Moves with scroll|
| `fixed`      | Viewport     | Moves the element | Stays fixed        |
| `sticky` | Its nearest scrollable ancestor | Sticks after offset | Becomes fixed after threshold |

====================================================================
 1. Overlaying Elements Using `absolute` Position

Sometimes, you may want to overlay an element on top of another. This can be achieved by using the `absolute` position.

Example: Creating a Card with an Overlay
<style>
  .card {
    position: relative;
    width: 300px;
    height: 200px;
    background-color: lightblue;
  }
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>

<div class="card">
  <div class="overlay">Overlay Text</div>
</div>
- The `.overlay` element is positioned absolutely within the `.card`, covering it entirely with a semi-transparent background.

---------------------------------------------------
 2. Sticky Navigation Bar
A common use of `sticky` positioning is to create a navigation bar that sticks to the top of the viewport when scrolling.

Example: Sticky Navbar
<style>
  .navbar {
    position: sticky;
    top: 0;
    background-color: #333;
    color: white;
    padding: 10px 0;
    text-align: center;
  }
  .content {
    height: 2000px;
    padding: 20px;
  }
</style>

<div class="navbar">Sticky Navbar</div>
<div class="content">Scroll down to see the sticky navbar in action.</div>

- The `.navbar` will stick to the top of the page when you scroll past it.

---------------------------------------------------------------------
 3. Fixed Footer
A fixed footer stays at the bottom of the viewport even when the page is scrolled.

Example: Fixed Footer
<style>
  .footer {
    position: fixed;
    bottom: 0;
    width: 100%;
    background-color: #444;
    color: white;
    text-align: center;
    padding: 10px;
  }
</style>

<div class="content" style="height: 1500px; padding: 20px;">
  Scroll down to see the fixed footer.
</div>
<div class="footer">Fixed Footer</div>

- The `.footer` remains visible at the bottom of the screen regardless of scrolling.

------------------------------------------------------------
 4. Relative Positioning for Tooltip

Using `relative` positioning can help in creating tooltips that are slightly offset from their target elements.

Example: Tooltip on Hover
<style>
  .tooltip-container {
    position: relative;
    display: inline-block;
  }
  .tooltip-text {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: black;
    color: white;
    padding: 5px;
    border-radius: 3px;
    white-space: nowrap;
    visibility: hidden;
  }
  .tooltip-container:hover .tooltip-text {
    visibility: visible;
  }
</style>

<div class="tooltip-container">
  Hover me
  <div class="tooltip-text">Tooltip text</div>
</div>

- The `.tooltip-text` is absolutely positioned relative to `.tooltip-container` and appears on hover.