There are several methods to create responsive web pages using HTML and CSS. Each method helps ensure that the content and layout of a web page adjust gracefully to different screen sizes and devices. Here are some key approaches:

### 1. Using Media Queries

Media queries allow you to apply CSS rules based on the device's characteristics, such as screen width, height, and resolution.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-size: 16px;
      background-color: lightblue;
    }

    @media (max-width: 768px) {
      body {
        font-size: 14px;
        background-color: lightgreen;
      }
    }

    @media (max-width: 480px) {
      body {
        font-size: 12px;
        background-color: lightcoral;
      }
    }
  </style>
</head>
<body>
  <h1>Responsive Design with Media Queries</h1>
  <p>Resize the browser window to see the effect.</p>
</body>
</html>
```

### 2. Using Fluid Grids

Fluid grids use relative units like percentages instead of fixed units like pixels to create a flexible layout that adjusts to different screen sizes.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .container {
      width: 80%;
      margin: 0 auto;
    }

    .column {
      float: left;
      width: 50%;
      box-sizing: border-box;
      padding: 10px;
    }

    @media (max-width: 768px) {
      .column {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="column" style="background-color: lightcoral;">Column 1</div>
    <div class="column" style="background-color: lightblue;">Column 2</div>
  </div>
</body>
</html>
```

### 3. Using Flexbox

Flexbox is a CSS layout model that provides a more efficient way to align and distribute space among items in a container, even when their sizes are dynamic.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .container {
      display: flex;
      flex-wrap: wrap;
    }

    .item {
      flex: 1 1 50%;
      box-sizing: border-box;
      padding: 10px;
      text-align: center;
    }

    @media (max-width: 768px) {
      .item {
        flex: 1 1 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="item" style="background-color: lightcoral;">Item 1</div>
    <div class="item" style="background-color: lightblue;">Item 2</div>
    <div class="item" style="background-color: lightgreen;">Item 3</div>
    <div class="item" style="background-color: lightyellow;">Item 4</div>
  </div>
</body>
</html>
```

### 4. Using CSS Grid

CSS Grid is a powerful layout system designed for handling both rows and columns, making it ideal for creating complex and responsive layouts.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .container {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }

    .item {
      background-color: lightblue;
      text-align: center;
      padding: 20px;
    }

    @media (max-width: 768px) {
      .container {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="item">Item 1</div>
    <div class="item">Item 2</div>
    <div class="item">Item 3</div>
    <div class="item">Item 4</div>
  </div>
</body>
</html>
```

### 5. Using Viewport Units

Viewport units (`vw`, `vh`) are CSS units relative to the size of the viewport, making them useful for responsive typography and layout adjustments.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    h1 {
      font-size: 5vw; /* 5% of the viewport width */
    }

    p {
      font-size: 2vh; /* 2% of the viewport height */
    }
  </style>
</head>
<body>
  <h1>Responsive Typography</h1>
  <p>This text size adjusts according to the viewport size.</p>
</body>
</html>
```

### 6. Using Frameworks (e.g., Bootstrap)

Frameworks like Bootstrap provide pre-designed responsive grid systems and components that simplify the process of creating responsive web pages.

Example:
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container">
    <div class="row">
      <div class="col-md-6" style="background-color: lightcoral;">Column 1</div>
      <div class="col-md-6" style="background-color: lightblue;">Column 2</div>
    </div>
  </div>
</body>
</html>
```

### Summary:

- Media Queries adjust styles based on device properties.
- Fluid Grids and Flexible Images use percentages to allow dynamic resizing.
- Flexbox and CSS Grid provide modern, flexible layout solutions.
- Viewport Units adapt element sizes to the viewport.
- Frameworks like Bootstrap offer pre-built responsive components.

