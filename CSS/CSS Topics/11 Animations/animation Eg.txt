
### Examples:
#### 1. Simple Fade-In Animation
Example:
          <style>
              @keyframes fadeIn {
                from {
                  opacity: 0;
                }
                to {
                  opacity: 1;
                }
              }

              .fade-in {
                animation-name: fadeIn;
                animation-duration: 2s;
              }
          </style>

          <div class="fade-in">This text will fade in.</div>

- Explanation: The text starts fully transparent (`opacity: 0`) and gradually becomes fully opaque (`opacity: 1`) over `2 seconds`.

-------------------------------------------
#### 2. Slide In from Left

Example:

        <style>
          @keyframes slideIn {
            from {
              transform: translateX(-100%);
            }
            to {
              transform: translateX(0);
            }
          }

          .slide-in {
            animation-name: slideIn;
            animation-duration: 1s;
          }
        </style>

        <div class="slide-in">Sliding in from the left!</div>

- Explanation: The element starts off-screen to the left and slides into view over `1 second`.

--------------------------------------------------------------------
#### 3. Bouncing Ball

Example:
            <style>
              @keyframes bounce {
                0%, 100% {
                  transform: translateY(0);
                }
                50% {
                  transform: translateY(-100px);
                }
              }

              .bouncing-ball {
                width: 50px;
                height: 50px;
                background-color: red;
                border-radius: 50%;
                position: absolute;
                bottom: 0;
                animation-name: bounce;
                animation-duration: 1s;
                animation-iteration-count: infinite;
                animation-timing-function: ease-in-out;
              }
            </style>

            <div class="bouncing-ball"></div>

- Explanation: The ball bounces up and down infinitely, creating a dynamic effect.

---------------------------------------------------------
#### 4. Rotating Image

Example:
        <style>
          @keyframes rotate {
            from {
              transform: rotate(0deg);
            }
            to {
              transform: rotate(360deg);
            }
          }

          .rotating {
            animation-name: rotate;
            animation-duration: 2s;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
          }
        </style>

        <img class="rotating" src="https://via.placeholder.com/100" alt="Rotating Image">

- Explanation: The image rotates continuously in a circle with a smooth linear motion.

-----------------------------------------------------------
#### 5. Button Hover Animation

Example:
          <style>
            @keyframes pulse {
              0% {
                transform: scale(1);
              }
              50% {
                transform: scale(1.1);
              }
              100% {
                transform: scale(1);
              }
            }

            .pulse-button {
              padding: 10px 20px;
              background-color: #007bff;
              color: white;
              border: none;
              border-radius: 5px;
              cursor: pointer;
              animation-name: pulse;
              animation-duration: 1s;
              animation-iteration-count: infinite;
              animation-timing-function: ease-in-out;
            }
          </style>

          <button class="pulse-button">Hover Me</button>

- Explanation: The button pulses continuously, enlarging and shrinking slightly to draw attention.

-------------------------------------------------------------------------------
### Combining Multiple Animations:
You can combine multiple animations by separating them with commas.

Example: Combined Fade and Slide
        <style>
          @keyframes fadeSlide {
            from {
              opacity: 0;
              transform: translateY(20px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }

          .fade-slide {
            animation: fadeSlide 1s ease-out;
          }
        </style>

        <div class="fade-slide">Fading and sliding up!</div>

- Explanation: The element both fades in and slides up simultaneously.
========================================================================================

### 1. Using Multiple Keyframes for Complex Animations:
You can define multiple stages in a keyframe to create detailed animations.

Example: Complex Bounce and Color Change
          <style>
            @keyframes complexBounce {
              0%, 100% {
                transform: translateY(0);
                background-color: red;
              }
              25% {
                transform: translateY(-50px);
                background-color: orange;
              }
              50% {
                transform: translateY(-100px);
                background-color: yellow;
              }
              75% {
                transform: translateY(-50px);
                background-color: green;
              }
            }

            .complex-bounce {
              width: 50px;
              height: 50px;
              background-color: red;
              animation: complexBounce 2s infinite ease-in-out;
            }
          </style>

          <div class="complex-bounce"></div>

- Explanation: The element moves up and down with varying heights and changes colors at different stages, creating a multi-step bounce effect.

-----------------------------------------------------------------------------
### 2. Animation Delays and Staggered Effects:
Delays can create staggered effects when multiple elements are animated sequentially.

Example: Staggered List Item Fade-In
            <style>
              @keyframes fadeIn {
                from {
                  opacity: 0;
                  transform: translateY(20px);
                }
                to {
                  opacity: 1;
                  transform: translateY(0);
                }
              }

              .staggered-list li {
                opacity: 0;
                animation: fadeIn 1s ease-out forwards;
              }

              .staggered-list li:nth-child(1) {
                animation-delay: 0s;
              }
              .staggered-list li:nth-child(2) {
                animation-delay: 0.3s;
              }
              .staggered-list li:nth-child(3) {
                animation-delay: 0.6s;
              }
            </style>

            <ul class="staggered-list">
              <li>Item 1</li>
              <li>Item 2</li>
              <li>Item 3</li>
            </ul>

- Explanation: Each list item fades in with a slight delay, creating a staggered appearance.

----------------------------------------------------------------------------------------
### 3. Combining Multiple Animations:
You can apply multiple animations to a single element by separating them with commas.

Example: Spin and Fade-In Simultaneously
          <style>
            @keyframes spin {
              from {
                transform: rotate(0deg);
              }
              to {
                transform: rotate(360deg);
              }
            }

            @keyframes fadeIn {
              from {
                opacity: 0;
              }
              to {
                opacity: 1;
              }
            }

            .spin-fade {
              width: 100px;
              height: 100px;
              background-color: lightblue;
              animation: spin 2s linear infinite, fadeIn 2s ease-in-out;
            }
          </style>

          <div class="spin-fade"></div>

- Explanation: The element spins continuously while fading in, combining two animations into one effect.

------------------------------------------------------------------------------------
### 4. Animating Along a Path:
You can create more complex movement patterns using `translate` and `rotate`.

Example: Circular Path Animation
        <style>
          @keyframes moveInCircle {
            0% {
              transform: translate(0, 0) rotate(0deg);
            }
            25% {
              transform: translate(100px, 0) rotate(90deg);
            }
            50% {
              transform: translate(100px, 100px) rotate(180deg);
            }
            75% {
              transform: translate(0, 100px) rotate(270deg);
            }
            100% {
              transform: translate(0, 0) rotate(360deg);
            }
          }

          .circle-path {
            width: 20px;
            height: 20px;
            background-color: blue;
            position: absolute;
            top: 50px;
            left: 50px;
            animation: moveInCircle 4s linear infinite;
          }
        </style>

        <div class="circle-path"></div>

- Explanation: The element moves along a square path while rotating, creating the illusion of circular movement.

----------------------------------------------------------------------------------------
### 5. Hover Animation with Delay

Hover effects can be enhanced with animations and delays to create more engaging interactions.
Example: Delayed Hover Expand
          <style>
            @keyframes expand {
              from {
                width: 100px;
                height: 100px;
              }
              to {
                width: 150px;
                height: 150px;
              }
            }

            .expand-hover {
              width: 100px;
              height: 100px;
              background-color: purple;
              transition: all 0.3s ease;
            }

            .expand-hover:hover {
              animation: expand 0.5s ease forwards;
            }
          </style>

          <div class="expand-hover"></div>

- Explanation: On hover, the element expands smoothly with a slight delay, providing a tactile feedback effect.

===============================================================================================

### 1. Animation with Different Fill Modes

The `animation-fill-mode` property defines how styles are applied to the element before and after the animation.

- `forwards`: Retains the final keyframe's styles.
- `backwards`: Applies the starting keyframe's styles during the delay.
- `both`: Combines `forwards` and `backwards`.

Example: Using Fill Modes
          <style>
            @keyframes moveRight {
              from {
                transform: translateX(0);
              }
              to {
                transform: translateX(100px);
              }
            }

            .box {
              width: 50px;
              height: 50px;
              background-color: lightcoral;
              animation: moveRight 2s forwards;
            }
          </style>

          <div class="box"></div>

- Explanation: The box moves 100px to the right and stays there because of the `forwards` fill mode.

-----------------------------------------------------------------------
### 2. Pausing and Resuming Animations

You can control the animation's playback state using the `animation-play-state` property.

- `running`: The animation is playing.
- `paused`: The animation is paused.

Example: Pause and Resume on Hover
          <style>
            @keyframes rotate {
              from {
                transform: rotate(0deg);
              }
              to {
                transform: rotate(360deg);
              }
            }

            .rotating-box {
              width: 50px;
              height: 50px;
              background-color: lightblue;
              animation: rotate 3s linear infinite;
            }

            .rotating-box:hover {
              animation-play-state: paused;
            }
          </style>

          <div class="rotating-box"></div>

- Explanation: The box rotates continuously but pauses when you hover over it.

-------------------------------------------------------------------------
### 3. Chaining Multiple Animations with Different Timing

You can chain multiple animations by applying different properties and delays to the same element.

Example: Chained Animation
            <style>
              @keyframes moveDown {
                from {
                  transform: translateY(0);
                }
                to {
                  transform: translateY(100px);
                }
              }

              @keyframes changeColor {
                from {
                  background-color: lightgreen;
                }
                to {
                  background-color: darkgreen;
                }
              }

              .chained-animation {
                width: 50px;
                height: 50px;
                animation: moveDown 2s ease-in, changeColor 2s ease-in 2s;
              }
            </style>

            <div class="chained-animation"></div>

- Explanation: The box first moves down, then after 2 seconds, its color changes.

--------------------------------------------------------------------------------------
### 4. Animating with Steps

The `steps` function allows you to create animations that transition in distinct steps.

Example: Stepped Animation
          <style>
            @keyframes stepAnimation {
              from {
                transform: translateX(0);
              }
              to {
                transform: translateX(200px);
              }
            }

            .stepped-box {
              width: 50px;
              height: 50px;
              background-color: lightseagreen;
              animation: stepAnimation 2s steps(5) infinite;
            }
          </style>

          <div class="stepped-box"></div>

- Explanation: The box moves 200px to the right in 5 discrete steps, rather than a smooth transition.

-----------------------------------------------------------------------------------------
### 5. Using Animation Events

You can use JavaScript to listen to animation events such as `animationstart`, `animationend`, and `animationiteration`.

Example: Listening to Animation Events
          <style>
            @keyframes scaleUp {
              from {
                transform: scale(1);
              }
              to {
                transform: scale(1.5);
              }
            } 

            .event-box {
              width: 50px;
              height: 50px;
              background-color: salmon;
              animation: scaleUp 2s infinite alternate;
            }
          </style>

          <div class="event-box"></div>
          <script>
            const box = document.querySelector('.event-box');
            box.addEventListener('animationstart', () => {
              console.log('Animation started');
            });
            box.addEventListener('animationend', () => {
              console.log('Animation ended');
            });
            box.addEventListener('animationiteration', () => {
              console.log('Animation iteration');
            });
          </script>

- Explanation: Messages are logged to the console at the start, end, and each iteration of the animation.
========================================================================
