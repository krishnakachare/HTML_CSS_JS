## HTML5 and JavaScript Integration:
    - Embedding and linking JavaScript
    - Using JavaScript with HTML5 APIs
    - Event handling in HTML5 elements

================================================================================
### 1. Embedding and Linking JavaScript
JavaScript can be embedded within an HTML file or linked as an external file.

Example: Embedded JavaScript

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Embedded JavaScript Example</title>
            <script>
                function showMessage() {
                    alert("Hello from embedded JavaScript!");
                }
            </script>
        </head>
        <body>
            <h1>Welcome to HTML5</h1>
            <button onclick="showMessage()">Click Me</button>
        </body>
        </html>
`````````````````````````````````````````````````````````````````````````````
Example: Linking External JavaScript

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>External JavaScript Example</title>
            <script src="script.js"></script>
        </head>
        <body>
            <h1>Welcome to HTML5</h1>
            <button onclick="showMessage()">Click Me</button>
        </body>
        </html>
``````````````````````````````````````````````````````````````````````````````````````
`script.js` (external file):

        function showMessage() {
            alert("Hello from external JavaScript!");
        }
----------------------------------------------------------------------------------------------
### 2. Using JavaScript with HTML5 APIs

    HTML5 provides several APIs that can be leveraged with JavaScript, such as the Canvas API, Geolocation API, and Web Storage API.

Example: Using the Canvas API for Drawing

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Canvas API Example</title>
        </head>
        <body>
            <h1>Canvas Drawing</h1>
            <canvas id="myCanvas" width="400" height="400" style="border:1px solid #000;"></canvas>

            <script>
                const canvas = document.getElementById('myCanvas');
                const ctx = canvas.getContext('2d');

                // Draw a rectangle
                ctx.fillStyle = 'blue';
                ctx.fillRect(50, 50, 150, 100);

                // Draw a circle
                ctx.beginPath();
                ctx.arc(200, 200, 50, 0, Math.PI * 2);
                ctx.fillStyle = 'red';
                ctx.fill();
            </script>
        </body>
        </html>
````````````````````````````````````````````````````````````````````````````````````

Example: Using the Geolocation API

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Geolocation API Example</title>
        </head>
        <body>
            <h1>Get Your Location</h1>
            <button onclick="getLocation()">Get Location</button>
            <p id="output"></p>

            <script>
                function getLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(showPosition, showError);
                    } else {
                        document.getElementById("output").innerText = "Geolocation is not supported by your browser.";
                    }
                }

                function showPosition(position) {
                    document.getElementById("output").innerText =
                        `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`;
                }

                function showError(error) {
                    let message;
                    switch (error.code) {
                        case error.PERMISSION_DENIED:
                            message = "User denied the request for Geolocation.";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            message = "Location information is unavailable.";
                            break;
                        case error.TIMEOUT:
                            message = "The request to get user location timed out.";
                            break;
                        default:
                            message = "An unknown error occurred.";
                            break;
                    }
                    document.getElementById("output").innerText = message;
                }
            </script>
        </body>
        </html>
``````````````````````````````````````````````````````````````````````````````````

### 3. Event Handling in HTML5 Elements:
    Event handling can be done inline in HTML or through JavaScript.

Example: Inline Event Handling

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Inline Event Handling</title>
        </head>
        <body>
            <h1>Click Event</h1>
            <button onclick="changeText()">Click Me</button>
            <p id="text">Original Text</p>

            <script>
                function changeText() {
                    document.getElementById('text').innerText = "Text Changed!";
                }
            </script>
        </body>
        </html>
``````````````````````````````````````````````````````````````````````````````````

Example: Adding Event Listeners with JavaScript

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Event Listener Example</title>
        </head>
        <body>
            <h1>Mouse Events</h1>
            <button id="hoverBtn">Hover Over Me</button>
            <p id="hoverText">Hover over the button to see the change.</p>

            <script>
                const button = document.getElementById('hoverBtn');
                const text = document.getElementById('hoverText');

                button.addEventListener('mouseover', () => {
                    text.innerText = "You hovered over the button!";
                });

                button.addEventListener('mouseout', () => {
                    text.innerText = "Hover over the button to see the change.";
                });
            </script>
        </body>
        </html>
```````````````````````````````````````````````````````````````````````````````````````````