## Advanced HTML5 APIs:
    - Geolocation API
    - Web Storage API (localStorage and sessionStorage)
    - Web Workers
    - Web Sockets
    - Drag and Drop API 

=========================================================================
### 1. Geolocation API:
The Geolocation API allows web applications to access the geographical location of a device.

Example: Using Geolocation API

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Geolocation API</title>
        </head>
        <body>
            <h1>Geolocation Example</h1>
            <button onclick="getLocation()">Get Location</button>
            <p id="output"></p>

            <script>
                function getLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(showPosition, showError);
                    } else {
                        document.getElementById("output").textContent = "Geolocation is not supported by this browser.";
                    }
                }

                function showPosition(position) {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    document.getElementById("output").textContent = `Latitude: ${latitude}, Longitude: ${longitude}`;
                }

                function showError(error) {
                    switch (error.code) {
                        case error.PERMISSION_DENIED:
                            alert("User denied the request for Geolocation.");
                            break;
                        case error.POSITION_UNAVAILABLE:
                            alert("Location information is unavailable.");
                            break;
                        case error.TIMEOUT:
                            alert("The request to get user location timed out.");
                            break;
                        case error.UNKNOWN_ERROR:
                            alert("An unknown error occurred.");
                            break;
                    }
                }
            </script>
        </body>
        </html>
````````````````````````````````````````````````````````````````````````````````````````

### 2. Web Storage API

The Web Storage API provides two storage options:
    - localStorage: Stores data with no expiration.
    - sessionStorage: Stores data for the session, cleared when the browser is closed.

Example: Using localStorage and sessionStorage

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Web Storage API</title>
        </head>
        <body>
            <h1>Web Storage Example</h1>
            <input type="text" id="nameInput" placeholder="Enter your name">
            <button onclick="saveName()">Save Name</button>
            <button onclick="showName()">Show Name</button>
            <p id="output"></p>

            <script>
                function saveName() {
                    const name = document.getElementById("nameInput").value;
                    // Save to localStorage
                    localStorage.setItem("userName", name);
                    alert("Name saved to localStorage!");
                }

                function showName() {
                    const name = localStorage.getItem("userName");
                    document.getElementById("output").textContent = name ? `Hello, ${name}!` : "No name found.";
                }
            </script>
        </body>
        </html>
`````````````````````````````````````````````````````````````````````````````
### 3. Web Workers:
    Web Workers enable running JavaScript code in the background, without affecting the main thread's performance.

Example: Using Web Workers

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Web Worker Example</title>
        </head>
        <body>
            <h1>Web Workers Example</h1>
            <button onclick="startWorker()">Start Worker</button>
            <button onclick="stopWorker()">Stop Worker</button>
            <p id="output"></p>

            <script>
                let worker;
                function startWorker() {
                    if (typeof(Worker) !== "undefined") {
                        if (!worker) {
                            worker = new Worker("worker.js");
                            worker.onmessage = function(event) {
                                document.getElementById("output").textContent = event.data;
                            };
                        }
                    } else {
                        document.getElementById("output").textContent = "Web Workers are not supported in this browser.";
                    }
                }

                function stopWorker() {
                    if (worker) {
                        worker.terminate();
                        worker = null;
                        document.getElementById("output").textContent = "Worker stopped.";
                    }
                }
            </script>
        </body>
        </html>
`````````````````````````````````````````````````````````````````````````

Worker File (`worker.js`):

        let i = 0;
        function timedCount() {
            i++;
            postMessage(i);
            setTimeout(timedCount, 1000);
        }
        timedCount();
``````````````````````````````````````````````````
### 4. Web Sockets:
    Web Sockets enable two-way communication between a client and server.

Example: Using Web Sockets

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Web Sockets Example</title>
        </head>
        <body>
            <h1>Web Sockets Example</h1>
            <button onclick="connect()">Connect to WebSocket</button>
            <button onclick="sendMessage()">Send Message</button>
            <p id="output"></p>

            <script>
                let socket;

                function connect() {
                    socket = new WebSocket("wss://echo.websocket.org");
                    socket.onopen = function() {
                        document.getElementById("output").textContent = "Connected to WebSocket!";
                    };
                    socket.onmessage = function(event) {
                        document.getElementById("output").textContent = `Received: ${event.data}`;
                    };
                    socket.onerror = function(error) {
                        document.getElementById("output").textContent = `WebSocket Error: ${error.message}`;
                    };
                }

                function sendMessage() {
                    if (socket && socket.readyState === WebSocket.OPEN) {
                        socket.send("Hello, WebSocket!");
                    } else {
                        alert("WebSocket is not connected.");
                    }
                }
            </script>
        </body>
        </html>
`````````````````````````````````````````````````````````````````````
### 5. Drag and Drop API:
    The Drag and Drop API allows users to drag items from one location to another.

Example: Drag and Drop

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Drag and Drop Example</title>
            <style>
                #dragItem {
                    width: 100px;
                    height: 100px;
                    background-color: #4CAF50;
                    color: white;
                    text-align: center;
                    line-height: 100px;
                    margin: 20px;
                    cursor: grab;
                }
                #dropZone {
                    width: 200px;
                    height: 200px;
                    border: 2px dashed #ccc;
                    text-align: center;
                    line-height: 200px;
                }
            </style>
        </head>
        <body>
            <h1>Drag and Drop Example</h1>
            <div id="dragItem" draggable="true">Drag Me</div>
            <div id="dropZone">Drop Here</div>

            <script>
                const dragItem = document.getElementById("dragItem");
                const dropZone = document.getElementById("dropZone");

                dragItem.addEventListener("dragstart", function(event) {
                    event.dataTransfer.setData("text", event.target.id);
                });

                dropZone.addEventListener("dragover", function(event) {
                    event.preventDefault();
                });

                dropZone.addEventListener("drop", function(event) {
                    event.preventDefault();
                    const data = event.dataTransfer.getData("text");
                    const element = document.getElementById(data);
                    dropZone.appendChild(element);
                });
            </script>
        </body>
        </html>