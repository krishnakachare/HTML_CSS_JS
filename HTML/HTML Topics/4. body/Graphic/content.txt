## Graphics and Multimedia:
    - Introduction to the canvas element
    - Basic canvas drawing operations
    - Introduction to SVG (Scalable Vector Graphics)
===========================================================
### 1. Introduction to the `<canvas>` Element:
    The `<canvas>` element is used for rendering graphics, animations, and visualizations using JavaScript. It provides a drawing area in which you can use the Canvas API to create 2D or 3D graphics.

#### Key Features:
    - Attributes: 
    - `width` and `height` specify the dimensions of the canvas.
    - Default dimensions are 300x150 pixels.
    - Requires JavaScript: All drawing is done programmatically via JavaScript.
    - Fallback Content: Content between `<canvas>` tags is displayed if the browser doesnâ€™t support the element.

Example: Basic `<canvas>` Setup:

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Canvas Example</title>
        </head>
        <body>
            <h1>Canvas Example</h1>
            <canvas id="myCanvas" width="400" height="200" style="border:1px solid #000;"></canvas>
            <script>
                const canvas = document.getElementById("myCanvas");
                const ctx = canvas.getContext("2d");

                // Draw a rectangle
                ctx.fillStyle = "lightblue";
                ctx.fillRect(50, 50, 150, 100);
            </script>
        </body>
        </html>
```````````````````````````````````````````````````````````
### 2. Basic Canvas Drawing Operations:
The Canvas API includes methods for drawing shapes, text, images, and paths.

#### a. Drawing Shapes

Example: Rectangle, Line, and Circle

        <canvas id="drawingCanvas" width="400" height="300" style="border:1px solid black;"></canvas>
        <script>
            const canvas = document.getElementById("drawingCanvas");
            const ctx = canvas.getContext("2d");

            // Draw a filled rectangle
            ctx.fillStyle = "green";
            ctx.fillRect(50, 50, 100, 50);

            // Draw a line
            ctx.beginPath();
            ctx.moveTo(200, 50); // Start point
            ctx.lineTo(300, 150); // End point
            ctx.strokeStyle = "blue";
            ctx.stroke();

            // Draw a circle
            ctx.beginPath();
            ctx.arc(150, 150, 50, 0, 2 * Math.PI); // x, y, radius, start angle, end angle
            ctx.fillStyle = "red";
            ctx.fill();
        </script>
```````````````````````````````````````````````````````````````````

#### b. Drawing Text:
Example: Adding Text

        <canvas id="textCanvas" width="400" height="200" style="border:1px solid black;"></canvas>
        <script>
            const canvas = document.getElementById("textCanvas");
            const ctx = canvas.getContext("2d");

            ctx.font = "24px Arial";
            ctx.fillStyle = "black";
            ctx.fillText("Hello, Canvas!", 50, 100); // text, x, y
        </script>
```````````````````````````````````````````````````````````````````````

#### c. Working with Images
Example: Drawing an Image

        <canvas id="imageCanvas" width="400" height="300" style="border:1px solid black;"></canvas>
        <script>
            const canvas = document.getElementById("imageCanvas");
            const ctx = canvas.getContext("2d");

            const img = new Image();
            img.src = "https://via.placeholder.com/150"; // Replace with your image URL
            img.onload = function() {
                ctx.drawImage(img, 50, 50);
            };
        </script>
````````````````````````````````````````````````````````````````````````
### 3. Introduction to SVG (Scalable Vector Graphics)

    SVG is a markup language for creating vector graphics. Unlike `<canvas>`, SVG graphics are resolution-independent and are defined in XML format, allowing easy styling and scripting.

#### Key Features:
    - XML-based, editable in a text editor.
    - Can be styled with CSS and manipulated with JavaScript.
    - Retains quality when scaled.

Basic SVG Example

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SVG Example</title>
        </head>
        <body>
            <h1>SVG Example</h1>
            <svg width="400" height="200" style="border:1px solid black;">
                <!-- Rectangle -->
                <rect x="50" y="50" width="100" height="50" fill="lightblue" />

                <!-- Circle -->
                <circle cx="200" cy="100" r="40" fill="red" />

                <!-- Line -->
                <line x1="250" y1="50" x2="350" y2="150" stroke="green" stroke-width="2" />

                <!-- Text -->
                <text x="50" y="150" fill="black" font-size="18">Hello, SVG!</text>
            </svg>
        </body>
        </html>
````````````````````````````````````````````````````````````````````````````````````````

#### Comparison of `<canvas>` and SVG:
